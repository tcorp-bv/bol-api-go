// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetInvoicesParams creates a new GetInvoicesParams object
// with the default values initialized.
func NewGetInvoicesParams() *GetInvoicesParams {
	var ()
	return &GetInvoicesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetInvoicesParamsWithTimeout creates a new GetInvoicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetInvoicesParamsWithTimeout(timeout time.Duration) *GetInvoicesParams {
	var ()
	return &GetInvoicesParams{

		timeout: timeout,
	}
}

// NewGetInvoicesParamsWithContext creates a new GetInvoicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetInvoicesParamsWithContext(ctx context.Context) *GetInvoicesParams {
	var ()
	return &GetInvoicesParams{

		Context: ctx,
	}
}

// NewGetInvoicesParamsWithHTTPClient creates a new GetInvoicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetInvoicesParamsWithHTTPClient(client *http.Client) *GetInvoicesParams {
	var ()
	return &GetInvoicesParams{
		HTTPClient: client,
	}
}

/*GetInvoicesParams contains all the parameters to send to the API endpoint
for the get invoices operation typically these are written to a http.Request
*/
type GetInvoicesParams struct {

	/*PeriodEnd
	  Period end date in ISO 8601 standard.

	*/
	PeriodEnd *string
	/*PeriodStart
	  Period start date in ISO 8601 standard.

	*/
	PeriodStart *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get invoices params
func (o *GetInvoicesParams) WithTimeout(timeout time.Duration) *GetInvoicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get invoices params
func (o *GetInvoicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get invoices params
func (o *GetInvoicesParams) WithContext(ctx context.Context) *GetInvoicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get invoices params
func (o *GetInvoicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get invoices params
func (o *GetInvoicesParams) WithHTTPClient(client *http.Client) *GetInvoicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get invoices params
func (o *GetInvoicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPeriodEnd adds the periodEnd to the get invoices params
func (o *GetInvoicesParams) WithPeriodEnd(periodEnd *string) *GetInvoicesParams {
	o.SetPeriodEnd(periodEnd)
	return o
}

// SetPeriodEnd adds the periodEnd to the get invoices params
func (o *GetInvoicesParams) SetPeriodEnd(periodEnd *string) {
	o.PeriodEnd = periodEnd
}

// WithPeriodStart adds the periodStart to the get invoices params
func (o *GetInvoicesParams) WithPeriodStart(periodStart *string) *GetInvoicesParams {
	o.SetPeriodStart(periodStart)
	return o
}

// SetPeriodStart adds the periodStart to the get invoices params
func (o *GetInvoicesParams) SetPeriodStart(periodStart *string) {
	o.PeriodStart = periodStart
}

// WriteToRequest writes these params to a swagger request
func (o *GetInvoicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PeriodEnd != nil {

		// query param period-end
		var qrPeriodEnd string
		if o.PeriodEnd != nil {
			qrPeriodEnd = *o.PeriodEnd
		}
		qPeriodEnd := qrPeriodEnd
		if qPeriodEnd != "" {
			if err := r.SetQueryParam("period-end", qPeriodEnd); err != nil {
				return err
			}
		}

	}

	if o.PeriodStart != nil {

		// query param period-start
		var qrPeriodStart string
		if o.PeriodStart != nil {
			qrPeriodStart = *o.PeriodStart
		}
		qPeriodStart := qrPeriodStart
		if qPeriodStart != "" {
			if err := r.SetQueryParam("period-start", qPeriodStart); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
