// Code generated by go-swagger; DO NOT EDIT.

package shipments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetShipmentsParams creates a new GetShipmentsParams object
// with the default values initialized.
func NewGetShipmentsParams() *GetShipmentsParams {
	var (
		fulfilmentMethodDefault = string("FBR")
		pageDefault             = int32(1)
	)
	return &GetShipmentsParams{
		FulfilmentMethod: &fulfilmentMethodDefault,
		Page:             &pageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetShipmentsParamsWithTimeout creates a new GetShipmentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetShipmentsParamsWithTimeout(timeout time.Duration) *GetShipmentsParams {
	var (
		fulfilmentMethodDefault = string("FBR")
		pageDefault             = int32(1)
	)
	return &GetShipmentsParams{
		FulfilmentMethod: &fulfilmentMethodDefault,
		Page:             &pageDefault,

		timeout: timeout,
	}
}

// NewGetShipmentsParamsWithContext creates a new GetShipmentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetShipmentsParamsWithContext(ctx context.Context) *GetShipmentsParams {
	var (
		fulfilmentMethodDefault = string("FBR")
		pageDefault             = int32(1)
	)
	return &GetShipmentsParams{
		FulfilmentMethod: &fulfilmentMethodDefault,
		Page:             &pageDefault,

		Context: ctx,
	}
}

// NewGetShipmentsParamsWithHTTPClient creates a new GetShipmentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetShipmentsParamsWithHTTPClient(client *http.Client) *GetShipmentsParams {
	var (
		fulfilmentMethodDefault = string("FBR")
		pageDefault             = int32(1)
	)
	return &GetShipmentsParams{
		FulfilmentMethod: &fulfilmentMethodDefault,
		Page:             &pageDefault,
		HTTPClient:       client,
	}
}

/*GetShipmentsParams contains all the parameters to send to the API endpoint
for the get shipments operation typically these are written to a http.Request
*/
type GetShipmentsParams struct {

	/*FulfilmentMethod
	  The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).

	*/
	FulfilmentMethod *string
	/*OrderID
	  The id of the order. Only valid without fulfilment-method. The default fulfilment-method is ignored.

	*/
	OrderID *string
	/*Page
	  The page to get with a page size of 50.

	*/
	Page *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get shipments params
func (o *GetShipmentsParams) WithTimeout(timeout time.Duration) *GetShipmentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get shipments params
func (o *GetShipmentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get shipments params
func (o *GetShipmentsParams) WithContext(ctx context.Context) *GetShipmentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get shipments params
func (o *GetShipmentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get shipments params
func (o *GetShipmentsParams) WithHTTPClient(client *http.Client) *GetShipmentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get shipments params
func (o *GetShipmentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFulfilmentMethod adds the fulfilmentMethod to the get shipments params
func (o *GetShipmentsParams) WithFulfilmentMethod(fulfilmentMethod *string) *GetShipmentsParams {
	o.SetFulfilmentMethod(fulfilmentMethod)
	return o
}

// SetFulfilmentMethod adds the fulfilmentMethod to the get shipments params
func (o *GetShipmentsParams) SetFulfilmentMethod(fulfilmentMethod *string) {
	o.FulfilmentMethod = fulfilmentMethod
}

// WithOrderID adds the orderID to the get shipments params
func (o *GetShipmentsParams) WithOrderID(orderID *string) *GetShipmentsParams {
	o.SetOrderID(orderID)
	return o
}

// SetOrderID adds the orderId to the get shipments params
func (o *GetShipmentsParams) SetOrderID(orderID *string) {
	o.OrderID = orderID
}

// WithPage adds the page to the get shipments params
func (o *GetShipmentsParams) WithPage(page *int32) *GetShipmentsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get shipments params
func (o *GetShipmentsParams) SetPage(page *int32) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *GetShipmentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FulfilmentMethod != nil {

		// query param fulfilment-method
		var qrFulfilmentMethod string
		if o.FulfilmentMethod != nil {
			qrFulfilmentMethod = *o.FulfilmentMethod
		}
		qFulfilmentMethod := qrFulfilmentMethod
		if qFulfilmentMethod != "" {
			if err := r.SetQueryParam("fulfilment-method", qFulfilmentMethod); err != nil {
				return err
			}
		}

	}

	if o.OrderID != nil {

		// query param order-id
		var qrOrderID string
		if o.OrderID != nil {
			qrOrderID = *o.OrderID
		}
		qOrderID := qrOrderID
		if qOrderID != "" {
			if err := r.SetQueryParam("order-id", qOrderID); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
