// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new orders API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for orders API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CancelOrder(params *CancelOrderParams) (*CancelOrderAccepted, error)

	GetOrder(params *GetOrderParams) (*GetOrderOK, error)

	GetOrders(params *GetOrdersParams) (*GetOrdersOK, error)

	ShipOrderItem(params *ShipOrderItemParams) (*ShipOrderItemAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelOrder cancels an order item by order item id

  This endpoint can be used to either confirm a cancellation request by the customer or to cancel an order you yourself are unable to fulfil.
*/
func (a *Client) CancelOrder(params *CancelOrderParams) (*CancelOrderAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancel-order",
		Method:             "PUT",
		PathPattern:        "/retailer/orders/{order-item-id}/cancellation",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelOrderAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancel-order: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrder gets an order by order id

  Gets an order by order id.
*/
func (a *Client) GetOrder(params *GetOrderParams) (*GetOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-order",
		Method:             "GET",
		PathPattern:        "/retailer/orders/{order-id}",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-order: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrders gets open orders

  Gets a paginated list of all open orders sorted by date in descending order.
*/
func (a *Client) GetOrders(params *GetOrdersParams) (*GetOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-orders",
		Method:             "GET",
		PathPattern:        "/retailer/orders",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrdersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-orders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipOrderItem ships order item

  Ship a single order item within a customer order by providing shipping information. In case you purchased a shipping label you can add the shippingLabelCode to this message. In that case the transport element must be left empty. If you ship the item(s) using your own transporter method you must omit the shippingLabelCode entirely.
*/
func (a *Client) ShipOrderItem(params *ShipOrderItemParams) (*ShipOrderItemAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipOrderItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ship-order-item",
		Method:             "PUT",
		PathPattern:        "/retailer/orders/{order-item-id}/shipment",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipOrderItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShipOrderItemAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ship-order-item: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
