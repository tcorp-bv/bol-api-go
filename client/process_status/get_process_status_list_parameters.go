// Code generated by go-swagger; DO NOT EDIT.

package process_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProcessStatusListParams creates a new GetProcessStatusListParams object
// with the default values initialized.
func NewGetProcessStatusListParams() *GetProcessStatusListParams {
	var (
		pageDefault = int32(1)
	)
	return &GetProcessStatusListParams{
		Page: &pageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetProcessStatusListParamsWithTimeout creates a new GetProcessStatusListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetProcessStatusListParamsWithTimeout(timeout time.Duration) *GetProcessStatusListParams {
	var (
		pageDefault = int32(1)
	)
	return &GetProcessStatusListParams{
		Page: &pageDefault,

		timeout: timeout,
	}
}

// NewGetProcessStatusListParamsWithContext creates a new GetProcessStatusListParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetProcessStatusListParamsWithContext(ctx context.Context) *GetProcessStatusListParams {
	var (
		pageDefault = int32(1)
	)
	return &GetProcessStatusListParams{
		Page: &pageDefault,

		Context: ctx,
	}
}

// NewGetProcessStatusListParamsWithHTTPClient creates a new GetProcessStatusListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetProcessStatusListParamsWithHTTPClient(client *http.Client) *GetProcessStatusListParams {
	var (
		pageDefault = int32(1)
	)
	return &GetProcessStatusListParams{
		Page:       &pageDefault,
		HTTPClient: client,
	}
}

/*GetProcessStatusListParams contains all the parameters to send to the API endpoint
for the get process status list operation typically these are written to a http.Request
*/
type GetProcessStatusListParams struct {

	/*EntityID
	  The entity id is not unique so you need to provide an event type. The entity id can either be order item id, transport id, return number or inbound reference.

	*/
	EntityID string
	/*EventType
	  The event type can only be used in combination with the entity id.

	*/
	EventType string
	/*Page
	  The requested page number with a pagesize of 50

	*/
	Page *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get process status list params
func (o *GetProcessStatusListParams) WithTimeout(timeout time.Duration) *GetProcessStatusListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get process status list params
func (o *GetProcessStatusListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get process status list params
func (o *GetProcessStatusListParams) WithContext(ctx context.Context) *GetProcessStatusListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get process status list params
func (o *GetProcessStatusListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get process status list params
func (o *GetProcessStatusListParams) WithHTTPClient(client *http.Client) *GetProcessStatusListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get process status list params
func (o *GetProcessStatusListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEntityID adds the entityID to the get process status list params
func (o *GetProcessStatusListParams) WithEntityID(entityID string) *GetProcessStatusListParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the get process status list params
func (o *GetProcessStatusListParams) SetEntityID(entityID string) {
	o.EntityID = entityID
}

// WithEventType adds the eventType to the get process status list params
func (o *GetProcessStatusListParams) WithEventType(eventType string) *GetProcessStatusListParams {
	o.SetEventType(eventType)
	return o
}

// SetEventType adds the eventType to the get process status list params
func (o *GetProcessStatusListParams) SetEventType(eventType string) {
	o.EventType = eventType
}

// WithPage adds the page to the get process status list params
func (o *GetProcessStatusListParams) WithPage(page *int32) *GetProcessStatusListParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get process status list params
func (o *GetProcessStatusListParams) SetPage(page *int32) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *GetProcessStatusListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param entity-id
	qrEntityID := o.EntityID
	qEntityID := qrEntityID
	if qEntityID != "" {
		if err := r.SetQueryParam("entity-id", qEntityID); err != nil {
			return err
		}
	}

	// query param event-type
	qrEventType := o.EventType
	qEventType := qrEventType
	if qEventType != "" {
		if err := r.SetQueryParam("event-type", qEventType); err != nil {
			return err
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
