// Code generated by go-swagger; DO NOT EDIT.

package process_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new process status API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for process status API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetProcessStatus(params *GetProcessStatusParams) (*GetProcessStatusOK, error)

	GetProcessStatusBulk(params *GetProcessStatusBulkParams) (*GetProcessStatusBulkOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetProcessStatus gets the status of an asynchronous process by id

  Retrieve a specific process-status, which shows information regarding a previously executed PUT/POST/DELETE request. All PUT/POST/DELETE requests on the other endpoints will supply a process-status-id in the related response. You can use this id to retrieve a status by using the endpoint below.
*/
func (a *Client) GetProcessStatus(params *GetProcessStatusParams) (*GetProcessStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-process-status",
		Method:             "GET",
		PathPattern:        "/retailer/process-status/{process-status-id}",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProcessStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-process-status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessStatusBulk gets the status of multiple asynchronous processes by an array of process status id s for a retailer

  Retrieve a list of process statuses, which shows information regarding previously executed PUT/POST/DELETE requests. No more than 1000 process status id's can be sent in a single request.
*/
func (a *Client) GetProcessStatusBulk(params *GetProcessStatusBulkParams) (*GetProcessStatusBulkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessStatusBulkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-process-status-bulk",
		Method:             "POST",
		PathPattern:        "/retailer/process-status",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProcessStatusBulkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessStatusBulkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-process-status-bulk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
