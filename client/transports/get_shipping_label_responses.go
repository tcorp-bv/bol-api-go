// Code generated by go-swagger; DO NOT EDIT.

package transports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tcorp-bv/bol-api-go/models"
)

// GetShippingLabelReader is a Reader for the GetShippingLabel structure.
type GetShippingLabelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetShippingLabelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetShippingLabelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetShippingLabelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetShippingLabelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetShippingLabelOK creates a GetShippingLabelOK with default headers values
func NewGetShippingLabelOK() *GetShippingLabelOK {
	return &GetShippingLabelOK{}
}

/*GetShippingLabelOK handles this case with default header values.

Ok: Successfully processed the request.
*/
type GetShippingLabelOK struct {
	Payload []strfmt.Base64
}

func (o *GetShippingLabelOK) Error() string {
	return fmt.Sprintf("[GET /retailer/transports/{transport-id}/shipping-label][%d] getShippingLabelOK  %+v", 200, o.Payload)
}

func (o *GetShippingLabelOK) GetPayload() []strfmt.Base64 {
	return o.Payload
}

func (o *GetShippingLabelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShippingLabelBadRequest creates a GetShippingLabelBadRequest with default headers values
func NewGetShippingLabelBadRequest() *GetShippingLabelBadRequest {
	return &GetShippingLabelBadRequest{}
}

/*GetShippingLabelBadRequest handles this case with default header values.

Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.
*/
type GetShippingLabelBadRequest struct {
	Payload *models.Problem
}

func (o *GetShippingLabelBadRequest) Error() string {
	return fmt.Sprintf("[GET /retailer/transports/{transport-id}/shipping-label][%d] getShippingLabelBadRequest  %+v", 400, o.Payload)
}

func (o *GetShippingLabelBadRequest) GetPayload() *models.Problem {
	return o.Payload
}

func (o *GetShippingLabelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShippingLabelNotFound creates a GetShippingLabelNotFound with default headers values
func NewGetShippingLabelNotFound() *GetShippingLabelNotFound {
	return &GetShippingLabelNotFound{}
}

/*GetShippingLabelNotFound handles this case with default header values.

Not found: The requested item could not be found.
*/
type GetShippingLabelNotFound struct {
	Payload *models.Problem
}

func (o *GetShippingLabelNotFound) Error() string {
	return fmt.Sprintf("[GET /retailer/transports/{transport-id}/shipping-label][%d] getShippingLabelNotFound  %+v", 404, o.Payload)
}

func (o *GetShippingLabelNotFound) GetPayload() *models.Problem {
	return o.Payload
}

func (o *GetShippingLabelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
