// Code generated by go-swagger; DO NOT EDIT.

package transports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new transports API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transports API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddTransportInformationByTransportID(params *AddTransportInformationByTransportIDParams) (*AddTransportInformationByTransportIDAccepted, error)

	GetShippingLabel(params *GetShippingLabelParams) (*GetShippingLabelOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddTransportInformationByTransportID adds transport information by transport id

  Add information to an existing transport. The transport id is part of the shipment. You can retrieve the transport id through the GET shipment list request.
*/
func (a *Client) AddTransportInformationByTransportID(params *AddTransportInformationByTransportIDParams) (*AddTransportInformationByTransportIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTransportInformationByTransportIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "add-transport-information-by-transport-id",
		Method:             "PUT",
		PathPattern:        "/retailer/transports/{transport-id}",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTransportInformationByTransportIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTransportInformationByTransportIDAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for add-transport-information-by-transport-id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetShippingLabel gets shipping label by transport id
*/
func (a *Client) GetShippingLabel(params *GetShippingLabelParams) (*GetShippingLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetShippingLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getShippingLabel",
		Method:             "GET",
		PathPattern:        "/retailer/transports/{transport-id}/shipping-label",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+pdf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetShippingLabelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetShippingLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getShippingLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
