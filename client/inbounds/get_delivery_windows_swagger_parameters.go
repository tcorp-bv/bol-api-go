// Code generated by go-swagger; DO NOT EDIT.

package inbounds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDeliveryWindowsParams creates a new GetDeliveryWindowsParams object
// with the default values initialized.
func NewGetDeliveryWindowsParams() *GetDeliveryWindowsParams {
	var (
		deliveryDateDefault = string("Today's date.")
		itemsToSendDefault  = int32(1)
	)
	return &GetDeliveryWindowsParams{
		DeliveryDate: &deliveryDateDefault,
		ItemsToSend:  &itemsToSendDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeliveryWindowsParamsWithTimeout creates a new GetDeliveryWindowsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDeliveryWindowsParamsWithTimeout(timeout time.Duration) *GetDeliveryWindowsParams {
	var (
		deliveryDateDefault = string("Today's date.")
		itemsToSendDefault  = int32(1)
	)
	return &GetDeliveryWindowsParams{
		DeliveryDate: &deliveryDateDefault,
		ItemsToSend:  &itemsToSendDefault,

		timeout: timeout,
	}
}

// NewGetDeliveryWindowsParamsWithContext creates a new GetDeliveryWindowsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDeliveryWindowsParamsWithContext(ctx context.Context) *GetDeliveryWindowsParams {
	var (
		deliveryDateDefault = string("Today's date.")
		itemsToSendDefault  = int32(1)
	)
	return &GetDeliveryWindowsParams{
		DeliveryDate: &deliveryDateDefault,
		ItemsToSend:  &itemsToSendDefault,

		Context: ctx,
	}
}

// NewGetDeliveryWindowsParamsWithHTTPClient creates a new GetDeliveryWindowsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDeliveryWindowsParamsWithHTTPClient(client *http.Client) *GetDeliveryWindowsParams {
	var (
		deliveryDateDefault = string("Today's date.")
		itemsToSendDefault  = int32(1)
	)
	return &GetDeliveryWindowsParams{
		DeliveryDate: &deliveryDateDefault,
		ItemsToSend:  &itemsToSendDefault,
		HTTPClient:   client,
	}
}

/*GetDeliveryWindowsParams contains all the parameters to send to the API endpoint
for the get delivery windows operation typically these are written to a http.Request
*/
type GetDeliveryWindowsParams struct {

	/*DeliveryDate
	  The expected delivery date and time for the inbound in ISO 8601 format.

	*/
	DeliveryDate *string
	/*ItemsToSend
	  The number of items that will be sent in the inbound.

	*/
	ItemsToSend *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get delivery windows params
func (o *GetDeliveryWindowsParams) WithTimeout(timeout time.Duration) *GetDeliveryWindowsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get delivery windows params
func (o *GetDeliveryWindowsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get delivery windows params
func (o *GetDeliveryWindowsParams) WithContext(ctx context.Context) *GetDeliveryWindowsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get delivery windows params
func (o *GetDeliveryWindowsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get delivery windows params
func (o *GetDeliveryWindowsParams) WithHTTPClient(client *http.Client) *GetDeliveryWindowsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get delivery windows params
func (o *GetDeliveryWindowsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeliveryDate adds the deliveryDate to the get delivery windows params
func (o *GetDeliveryWindowsParams) WithDeliveryDate(deliveryDate *string) *GetDeliveryWindowsParams {
	o.SetDeliveryDate(deliveryDate)
	return o
}

// SetDeliveryDate adds the deliveryDate to the get delivery windows params
func (o *GetDeliveryWindowsParams) SetDeliveryDate(deliveryDate *string) {
	o.DeliveryDate = deliveryDate
}

// WithItemsToSend adds the itemsToSend to the get delivery windows params
func (o *GetDeliveryWindowsParams) WithItemsToSend(itemsToSend *int32) *GetDeliveryWindowsParams {
	o.SetItemsToSend(itemsToSend)
	return o
}

// SetItemsToSend adds the itemsToSend to the get delivery windows params
func (o *GetDeliveryWindowsParams) SetItemsToSend(itemsToSend *int32) {
	o.ItemsToSend = itemsToSend
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeliveryWindowsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DeliveryDate != nil {

		// query param delivery-date
		var qrDeliveryDate string
		if o.DeliveryDate != nil {
			qrDeliveryDate = *o.DeliveryDate
		}
		qDeliveryDate := qrDeliveryDate
		if qDeliveryDate != "" {
			if err := r.SetQueryParam("delivery-date", qDeliveryDate); err != nil {
				return err
			}
		}

	}

	if o.ItemsToSend != nil {

		// query param items-to-send
		var qrItemsToSend int32
		if o.ItemsToSend != nil {
			qrItemsToSend = *o.ItemsToSend
		}
		qItemsToSend := swag.FormatInt32(qrItemsToSend)
		if qItemsToSend != "" {
			if err := r.SetQueryParam("items-to-send", qItemsToSend); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
