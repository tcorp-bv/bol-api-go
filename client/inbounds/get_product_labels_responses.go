// Code generated by go-swagger; DO NOT EDIT.

package inbounds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tcorp-bv/bol-api-go/models"
)

// GetProductLabelsReader is a Reader for the GetProductLabels structure.
type GetProductLabelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProductLabelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProductLabelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProductLabelsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProductLabelsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetProductLabelsOK creates a GetProductLabelsOK with default headers values
func NewGetProductLabelsOK() *GetProductLabelsOK {
	return &GetProductLabelsOK{}
}

/*GetProductLabelsOK handles this case with default header values.

Ok: Successfully processed the request.
*/
type GetProductLabelsOK struct {
	Payload []strfmt.Base64
}

func (o *GetProductLabelsOK) Error() string {
	return fmt.Sprintf("[POST /retailer/inbounds/productlabels][%d] getProductLabelsOK  %+v", 200, o.Payload)
}

func (o *GetProductLabelsOK) GetPayload() []strfmt.Base64 {
	return o.Payload
}

func (o *GetProductLabelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProductLabelsBadRequest creates a GetProductLabelsBadRequest with default headers values
func NewGetProductLabelsBadRequest() *GetProductLabelsBadRequest {
	return &GetProductLabelsBadRequest{}
}

/*GetProductLabelsBadRequest handles this case with default header values.

Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.
*/
type GetProductLabelsBadRequest struct {
	Payload *models.Problem
}

func (o *GetProductLabelsBadRequest) Error() string {
	return fmt.Sprintf("[POST /retailer/inbounds/productlabels][%d] getProductLabelsBadRequest  %+v", 400, o.Payload)
}

func (o *GetProductLabelsBadRequest) GetPayload() *models.Problem {
	return o.Payload
}

func (o *GetProductLabelsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProductLabelsNotFound creates a GetProductLabelsNotFound with default headers values
func NewGetProductLabelsNotFound() *GetProductLabelsNotFound {
	return &GetProductLabelsNotFound{}
}

/*GetProductLabelsNotFound handles this case with default header values.

Not found: The requested item could not be found.
*/
type GetProductLabelsNotFound struct {
	Payload *models.Problem
}

func (o *GetProductLabelsNotFound) Error() string {
	return fmt.Sprintf("[POST /retailer/inbounds/productlabels][%d] getProductLabelsNotFound  %+v", 404, o.Payload)
}

func (o *GetProductLabelsNotFound) GetPayload() *models.Problem {
	return o.Payload
}

func (o *GetProductLabelsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
