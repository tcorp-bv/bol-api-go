// Code generated by go-swagger; DO NOT EDIT.

package inbounds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new inbounds API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for inbounds API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetPackingList(params *GetPackingListParams) (*GetPackingListOK, error)

	GetDeliveryWindows(params *GetDeliveryWindowsParams) (*GetDeliveryWindowsOK, error)

	GetFbbTransporters(params *GetFbbTransportersParams) (*GetFbbTransportersOK, error)

	GetInbound(params *GetInboundParams) (*GetInboundOK, error)

	GetInboundShippingLabel(params *GetInboundShippingLabelParams) (*GetInboundShippingLabelOK, error)

	GetInbounds(params *GetInboundsParams) (*GetInboundsOK, error)

	GetProductLabels(params *GetProductLabelsParams) (*GetProductLabelsOK, error)

	PostInbound(params *PostInboundParams) (*PostInboundAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetPackingList gets packing list by inbound id

  Get packing list by inbound id.
*/
func (a *Client) GetPackingList(params *GetPackingListParams) (*GetPackingListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackingListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get packing list",
		Method:             "GET",
		PathPattern:        "/retailer/inbounds/{inbound-id}/packinglist",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+pdf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackingListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackingListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get packing list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeliveryWindows gets delivery windows for new inbound shipments

  Retrieve a list of available delivery windows when creating a new inbound shipment.
*/
func (a *Client) GetDeliveryWindows(params *GetDeliveryWindowsParams) (*GetDeliveryWindowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeliveryWindowsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-delivery-windows",
		Method:             "GET",
		PathPattern:        "/retailer/inbounds/delivery-windows",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeliveryWindowsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeliveryWindowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-delivery-windows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFbbTransporters gets f b b transporters list

  Get all transporters that carry out FBB shipments.
*/
func (a *Client) GetFbbTransporters(params *GetFbbTransportersParams) (*GetFbbTransportersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFbbTransportersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-fbb-transporters",
		Method:             "GET",
		PathPattern:        "/retailer/inbounds/fbb-transporters",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFbbTransportersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFbbTransportersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-fbb-transporters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInbound gets inbound by inbound id

  Get inbound details by inbound id.
*/
func (a *Client) GetInbound(params *GetInboundParams) (*GetInboundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInboundParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-inbound",
		Method:             "GET",
		PathPattern:        "/retailer/inbounds/{inbound-id}",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInboundReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInboundOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-inbound: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInboundShippingLabel gets f b b shippinglabel by inbound id

  Get FBB shippinglabel by inbound id.
*/
func (a *Client) GetInboundShippingLabel(params *GetInboundShippingLabelParams) (*GetInboundShippingLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInboundShippingLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-inbound-shipping-label",
		Method:             "GET",
		PathPattern:        "/retailer/inbounds/{inbound-id}/shippinglabel",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+pdf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInboundShippingLabelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInboundShippingLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-inbound-shipping-label: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInbounds gets inbound shipment list

  A paginated list of all inbound shipments.
*/
func (a *Client) GetInbounds(params *GetInboundsParams) (*GetInboundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInboundsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-inbounds",
		Method:             "GET",
		PathPattern:        "/retailer/inbounds",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInboundsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInboundsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-inbounds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProductLabels gets f b b productlabels by e a n

  Get FBB productlabels by EAN.
*/
func (a *Client) GetProductLabels(params *GetProductLabelsParams) (*GetProductLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductLabelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-product-labels",
		Method:             "POST",
		PathPattern:        "/retailer/inbounds/productlabels",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+pdf"},
		ConsumesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProductLabelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProductLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-product-labels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostInbound posts inbound shipment

  Create a new inbound shipment.
*/
func (a *Client) PostInbound(params *PostInboundParams) (*PostInboundAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInboundParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post-inbound",
		Method:             "POST",
		PathPattern:        "/retailer/inbounds",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInboundReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInboundAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post-inbound: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
