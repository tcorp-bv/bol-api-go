// Code generated by go-swagger; DO NOT EDIT.

package commission

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new commission API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for commission API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetCommission(params *GetCommissionParams) (*GetCommissionOK, error)

	GetCommissions(params *GetCommissionsParams) (*GetCommissionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetCommission gets all commissions and reductions by e a n per single e a n

  Commissions can be filtered by condition, which defaults to NEW. If price is provided, the exact commission amount will also be calculated.
*/
func (a *Client) GetCommission(params *GetCommissionParams) (*GetCommissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-commission",
		Method:             "GET",
		PathPattern:        "/retailer/commission/{ean}",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCommissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCommissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-commission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCommissions gets all commissions and reductions by e a n in bulk

  Gets all commissions and possible reductions by EAN, condition and optionally price. No more than 100 EAN`s can be sent in a single request.
*/
func (a *Client) GetCommissions(params *GetCommissionsParams) (*GetCommissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-commissions",
		Method:             "POST",
		PathPattern:        "/retailer/commission",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCommissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCommissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-commissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
