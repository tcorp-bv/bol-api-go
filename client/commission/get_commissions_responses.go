// Code generated by go-swagger; DO NOT EDIT.

package commission

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tcorp-bv/bol-api-go/models"
)

// GetCommissionsReader is a Reader for the GetCommissions structure.
type GetCommissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCommissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCommissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCommissionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCommissionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCommissionsOK creates a GetCommissionsOK with default headers values
func NewGetCommissionsOK() *GetCommissionsOK {
	return &GetCommissionsOK{}
}

/*GetCommissionsOK handles this case with default header values.

Ok: Successfully processed the request.
*/
type GetCommissionsOK struct {
	Payload *models.BulkCommissionResponse
}

func (o *GetCommissionsOK) Error() string {
	return fmt.Sprintf("[POST /retailer/commission][%d] getCommissionsOK  %+v", 200, o.Payload)
}

func (o *GetCommissionsOK) GetPayload() *models.BulkCommissionResponse {
	return o.Payload
}

func (o *GetCommissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BulkCommissionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCommissionsBadRequest creates a GetCommissionsBadRequest with default headers values
func NewGetCommissionsBadRequest() *GetCommissionsBadRequest {
	return &GetCommissionsBadRequest{}
}

/*GetCommissionsBadRequest handles this case with default header values.

Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.
*/
type GetCommissionsBadRequest struct {
	Payload *models.Problem
}

func (o *GetCommissionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /retailer/commission][%d] getCommissionsBadRequest  %+v", 400, o.Payload)
}

func (o *GetCommissionsBadRequest) GetPayload() *models.Problem {
	return o.Payload
}

func (o *GetCommissionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCommissionsNotFound creates a GetCommissionsNotFound with default headers values
func NewGetCommissionsNotFound() *GetCommissionsNotFound {
	return &GetCommissionsNotFound{}
}

/*GetCommissionsNotFound handles this case with default header values.

Not found: The requested item could not be found.
*/
type GetCommissionsNotFound struct {
	Payload *models.Problem
}

func (o *GetCommissionsNotFound) Error() string {
	return fmt.Sprintf("[POST /retailer/commission][%d] getCommissionsNotFound  %+v", 404, o.Payload)
}

func (o *GetCommissionsNotFound) GetPayload() *models.Problem {
	return o.Payload
}

func (o *GetCommissionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
