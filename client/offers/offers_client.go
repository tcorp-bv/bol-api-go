// Code generated by go-swagger; DO NOT EDIT.

package offers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new offers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for offers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteOffer(params *DeleteOfferParams) (*DeleteOfferAccepted, error)

	GetOffer(params *GetOfferParams) (*GetOfferOK, error)

	GetOfferExport(params *GetOfferExportParams) (*GetOfferExportOK, error)

	PostOffer(params *PostOfferParams) (*PostOfferAccepted, error)

	PostOfferExport(params *PostOfferExportParams) (*PostOfferExportAccepted, error)

	PutOffer(params *PutOfferParams) (*PutOfferAccepted, error)

	UpdateOfferPrice(params *UpdateOfferPriceParams) (*UpdateOfferPriceAccepted, error)

	UpdateOfferStock(params *UpdateOfferStockParams) (*UpdateOfferStockAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteOffer deletes offer by id

  Delete an offer by id.
*/
func (a *Client) DeleteOffer(params *DeleteOfferParams) (*DeleteOfferAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOfferParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-offer",
		Method:             "DELETE",
		PathPattern:        "/retailer/offers/{offer-id}",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOfferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOfferAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-offer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOffer retrieves an offer by its offer id

  Retrieve an offer by using the offer id provided to you when creating or listing your offers.
*/
func (a *Client) GetOffer(params *GetOfferParams) (*GetOfferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOfferParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-offer",
		Method:             "GET",
		PathPattern:        "/retailer/offers/{offer-id}",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOfferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOfferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-offer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOfferExport retrieves an offer export file by offer export id

  Retrieve an offer export file containing all offers.
*/
func (a *Client) GetOfferExport(params *GetOfferExportParams) (*GetOfferExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOfferExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-offer-export",
		Method:             "GET",
		PathPattern:        "/retailer/offers/export/{offer-export-id}",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOfferExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOfferExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-offer-export: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostOffer creates a new offer

  Creates a new offer, and adds it to the catalog. After creation, status information can be retrieved to review if the offer is valid and published to the shop.
*/
func (a *Client) PostOffer(params *PostOfferParams) (*PostOfferAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOfferParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post-offer",
		Method:             "POST",
		PathPattern:        "/retailer/offers",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOfferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOfferAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post-offer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostOfferExport requests an offer export file

  Request an offer export file containing all offers.
*/
func (a *Client) PostOfferExport(params *PostOfferExportParams) (*PostOfferExportAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOfferExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post-offer-export",
		Method:             "POST",
		PathPattern:        "/retailer/offers/export",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOfferExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOfferExportAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post-offer-export: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutOffer updates an offer

  Use this endpoint to send an offer update. This endpoint returns a process status.
*/
func (a *Client) PutOffer(params *PutOfferParams) (*PutOfferAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutOfferParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "put-offer",
		Method:             "PUT",
		PathPattern:        "/retailer/offers/{offer-id}",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOfferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutOfferAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put-offer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOfferPrice updates price s for offer by id

  Update price(s) for offer by id.
*/
func (a *Client) UpdateOfferPrice(params *UpdateOfferPriceParams) (*UpdateOfferPriceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOfferPriceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-offer-price",
		Method:             "PUT",
		PathPattern:        "/retailer/offers/{offer-id}/price",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOfferPriceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOfferPriceAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-offer-price: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOfferStock updates stock for offer by id

  Update stock for offer by id.
*/
func (a *Client) UpdateOfferStock(params *UpdateOfferStockParams) (*UpdateOfferStockAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOfferStockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-offer-stock",
		Method:             "PUT",
		PathPattern:        "/retailer/offers/{offer-id}/stock",
		ProducesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		ConsumesMediaTypes: []string{"application/vnd.retailer.v3+json", "application/vnd.retailer.v3+xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOfferStockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOfferStockAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-offer-stock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
