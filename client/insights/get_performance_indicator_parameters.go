// Code generated by go-swagger; DO NOT EDIT.

package insights

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPerformanceIndicatorParams creates a new GetPerformanceIndicatorParams object
// with the default values initialized.
func NewGetPerformanceIndicatorParams() *GetPerformanceIndicatorParams {
	var ()
	return &GetPerformanceIndicatorParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPerformanceIndicatorParamsWithTimeout creates a new GetPerformanceIndicatorParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPerformanceIndicatorParamsWithTimeout(timeout time.Duration) *GetPerformanceIndicatorParams {
	var ()
	return &GetPerformanceIndicatorParams{

		timeout: timeout,
	}
}

// NewGetPerformanceIndicatorParamsWithContext creates a new GetPerformanceIndicatorParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPerformanceIndicatorParamsWithContext(ctx context.Context) *GetPerformanceIndicatorParams {
	var ()
	return &GetPerformanceIndicatorParams{

		Context: ctx,
	}
}

// NewGetPerformanceIndicatorParamsWithHTTPClient creates a new GetPerformanceIndicatorParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPerformanceIndicatorParamsWithHTTPClient(client *http.Client) *GetPerformanceIndicatorParams {
	var ()
	return &GetPerformanceIndicatorParams{
		HTTPClient: client,
	}
}

/*GetPerformanceIndicatorParams contains all the parameters to send to the API endpoint
for the get performance indicator operation typically these are written to a http.Request
*/
type GetPerformanceIndicatorParams struct {

	/*Name
	  The type of the performance indicator

	*/
	Name []string
	/*Week
	  Week number in the ISO-8601 standard. If you would like to get the relative scores from the current week, please provide the current week number here. Be advised that measurements can change heavily over the course of the week.

	*/
	Week string
	/*Year
	  Year number in the ISO-8601 standard.

	*/
	Year string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get performance indicator params
func (o *GetPerformanceIndicatorParams) WithTimeout(timeout time.Duration) *GetPerformanceIndicatorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get performance indicator params
func (o *GetPerformanceIndicatorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get performance indicator params
func (o *GetPerformanceIndicatorParams) WithContext(ctx context.Context) *GetPerformanceIndicatorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get performance indicator params
func (o *GetPerformanceIndicatorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get performance indicator params
func (o *GetPerformanceIndicatorParams) WithHTTPClient(client *http.Client) *GetPerformanceIndicatorParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get performance indicator params
func (o *GetPerformanceIndicatorParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the get performance indicator params
func (o *GetPerformanceIndicatorParams) WithName(name []string) *GetPerformanceIndicatorParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get performance indicator params
func (o *GetPerformanceIndicatorParams) SetName(name []string) {
	o.Name = name
}

// WithWeek adds the week to the get performance indicator params
func (o *GetPerformanceIndicatorParams) WithWeek(week string) *GetPerformanceIndicatorParams {
	o.SetWeek(week)
	return o
}

// SetWeek adds the week to the get performance indicator params
func (o *GetPerformanceIndicatorParams) SetWeek(week string) {
	o.Week = week
}

// WithYear adds the year to the get performance indicator params
func (o *GetPerformanceIndicatorParams) WithYear(year string) *GetPerformanceIndicatorParams {
	o.SetYear(year)
	return o
}

// SetYear adds the year to the get performance indicator params
func (o *GetPerformanceIndicatorParams) SetYear(year string) {
	o.Year = year
}

// WriteToRequest writes these params to a swagger request
func (o *GetPerformanceIndicatorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesName := o.Name

	joinedName := swag.JoinByFormat(valuesName, "multi")
	// query array param name
	if err := r.SetQueryParam("name", joinedName...); err != nil {
		return err
	}

	// query param week
	qrWeek := o.Week
	qWeek := qrWeek
	if qWeek != "" {
		if err := r.SetQueryParam("week", qWeek); err != nil {
			return err
		}
	}

	// query param year
	qrYear := o.Year
	qYear := qrYear
	if qYear != "" {
		if err := r.SetQueryParam("year", qYear); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
