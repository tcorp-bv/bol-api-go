// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReducedShipment reduced shipment
//
// swagger:model ReducedShipment
type ReducedShipment struct {

	// The date and time in ISO 8601 format when the order item was shipped.
	// Format: date-time
	ShipmentDate strfmt.DateTime `json:"shipmentDate,omitempty"`

	// A unique identifier for this shipment.
	ShipmentID int64 `json:"shipmentId,omitempty"`

	// shipment items
	// Required: true
	ShipmentItems []*ReducedShipmentItem `json:"shipmentItems"`

	// Reference supplied by the user when this item was shipped.
	ShipmentReference string `json:"shipmentReference,omitempty"`

	// transport
	// Required: true
	Transport *ReducedTransport `json:"transport"`
}

// Validate validates this reduced shipment
func (m *ReducedShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateShipmentDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReducedShipment) validateShipmentDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ShipmentDate) { // not required
		return nil
	}

	if err := validate.FormatOf("shipmentDate", "body", "date-time", m.ShipmentDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReducedShipment) validateShipmentItems(formats strfmt.Registry) error {

	if err := validate.Required("shipmentItems", "body", m.ShipmentItems); err != nil {
		return err
	}

	for i := 0; i < len(m.ShipmentItems); i++ {
		if swag.IsZero(m.ShipmentItems[i]) { // not required
			continue
		}

		if m.ShipmentItems[i] != nil {
			if err := m.ShipmentItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shipmentItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReducedShipment) validateTransport(formats strfmt.Registry) error {

	if err := validate.Required("transport", "body", m.Transport); err != nil {
		return err
	}

	if m.Transport != nil {
		if err := m.Transport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transport")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReducedShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReducedShipment) UnmarshalBinary(b []byte) error {
	var res ReducedShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
