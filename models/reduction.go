// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Reduction reduction
//
// swagger:model Reduction
type Reduction struct {

	// A reduction to the commission if the maximum price criteria is met.
	CostReduction float64 `json:"costReduction,omitempty"`

	// The end date from which the commission reduction is not valid anymore.
	// Format: date
	EndDate strfmt.Date `json:"endDate,omitempty"`

	// Maximum offer price that can be used to benefit from a commission reduction.
	MaximumPrice float64 `json:"maximumPrice,omitempty"`

	// The start date from which the commission reduction is valid.
	// Format: date
	StartDate strfmt.Date `json:"startDate,omitempty"`
}

// Validate validates this reduction
func (m *Reduction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Reduction) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Reduction) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Reduction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Reduction) UnmarshalBinary(b []byte) error {
	var res Reduction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
