// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InboundRequest inbound request
//
// swagger:model InboundRequest
type InboundRequest struct {

	// Transporter for the inbound shipment.
	// Required: true
	FbbTransporter *Transporter `json:"fbbTransporter"`

	// Indicates whether the inbound will be labeled by bol.com or not.
	// Required: true
	LabellingService *bool `json:"labellingService"`

	// List of products.
	// Required: true
	Products []*InboundProductRequest `json:"products"`

	// A user defined reference to identify the inbound shipment.
	Reference string `json:"reference,omitempty"`

	// The chosen timeslot for the inbound shipment.
	// Required: true
	TimeSlot *TimeSlot `json:"timeSlot"`
}

// Validate validates this inbound request
func (m *InboundRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFbbTransporter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabellingService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeSlot(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundRequest) validateFbbTransporter(formats strfmt.Registry) error {

	if err := validate.Required("fbbTransporter", "body", m.FbbTransporter); err != nil {
		return err
	}

	if m.FbbTransporter != nil {
		if err := m.FbbTransporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fbbTransporter")
			}
			return err
		}
	}

	return nil
}

func (m *InboundRequest) validateLabellingService(formats strfmt.Registry) error {

	if err := validate.Required("labellingService", "body", m.LabellingService); err != nil {
		return err
	}

	return nil
}

func (m *InboundRequest) validateProducts(formats strfmt.Registry) error {

	if err := validate.Required("products", "body", m.Products); err != nil {
		return err
	}

	for i := 0; i < len(m.Products); i++ {
		if swag.IsZero(m.Products[i]) { // not required
			continue
		}

		if m.Products[i] != nil {
			if err := m.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InboundRequest) validateTimeSlot(formats strfmt.Registry) error {

	if err := validate.Required("timeSlot", "body", m.TimeSlot); err != nil {
		return err
	}

	if m.TimeSlot != nil {
		if err := m.TimeSlot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeSlot")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InboundRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InboundRequest) UnmarshalBinary(b []byte) error {
	var res InboundRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
