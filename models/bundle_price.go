// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BundlePrice bundle price
//
// swagger:model BundlePrice
type BundlePrice struct {

	// The price per single unit in case the customer orders at least the quantity provided. When using more than 1 price, the respective prices must be in decreasing order using 2 decimal precision and dot separated.
	// Required: true
	// Maximum: 9999
	// Minimum: 1
	Price *float64 `json:"price"`

	// The minimum quantity a customer must order in order to receive discount. The element with value 1 must at least be present. In case of using more elements, the respective quantities must be in increasing order.
	// Required: true
	// Maximum: 24
	// Minimum: 1
	Quantity *int32 `json:"quantity"`
}

// Validate validates this bundle price
func (m *BundlePrice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BundlePrice) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	if err := validate.Minimum("price", "body", float64(*m.Price), 1, false); err != nil {
		return err
	}

	if err := validate.Maximum("price", "body", float64(*m.Price), 9999, false); err != nil {
		return err
	}

	return nil
}

func (m *BundlePrice) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	if err := validate.MinimumInt("quantity", "body", int64(*m.Quantity), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("quantity", "body", int64(*m.Quantity), 24, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BundlePrice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BundlePrice) UnmarshalBinary(b []byte) error {
	var res BundlePrice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
