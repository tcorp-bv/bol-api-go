// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessStatus process status
//
// swagger:model ProcessStatus
type ProcessStatus struct {

	// Time of creation of the response.
	// Format: date-time
	CreateTimestamp strfmt.DateTime `json:"createTimestamp,omitempty"`

	// Describes the action that is being processed.
	Description string `json:"description,omitempty"`

	// The id of the object being processed. E.g. in case of a shipment process id, you will receive the id of the order item being processed.
	EntityID string `json:"entityId,omitempty"`

	// Shows error message if applicable.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// Name of the requested action that is being processed.
	EventType string `json:"eventType,omitempty"`

	// The process status id.
	ID int64 `json:"id,omitempty"`

	// Lists available actions applicable to this endpoint.
	Links []*Link `json:"links"`

	// Status of the action being processed.
	// Enum: [PENDING SUCCESS FAILURE TIMEOUT]
	Status string `json:"status,omitempty"`
}

// Validate validates this process status
func (m *ProcessStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessStatus) validateCreateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("createTimestamp", "body", "date-time", m.CreateTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProcessStatus) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var processStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING","SUCCESS","FAILURE","TIMEOUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		processStatusTypeStatusPropEnum = append(processStatusTypeStatusPropEnum, v)
	}
}

const (

	// ProcessStatusStatusPENDING captures enum value "PENDING"
	ProcessStatusStatusPENDING string = "PENDING"

	// ProcessStatusStatusSUCCESS captures enum value "SUCCESS"
	ProcessStatusStatusSUCCESS string = "SUCCESS"

	// ProcessStatusStatusFAILURE captures enum value "FAILURE"
	ProcessStatusStatusFAILURE string = "FAILURE"

	// ProcessStatusStatusTIMEOUT captures enum value "TIMEOUT"
	ProcessStatusStatusTIMEOUT string = "TIMEOUT"
)

// prop value enum
func (m *ProcessStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, processStatusTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProcessStatus) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessStatus) UnmarshalBinary(b []byte) error {
	var res ProcessStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
