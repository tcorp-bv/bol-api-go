// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateOfferRequest create offer request
//
// swagger:model CreateOfferRequest
type CreateOfferRequest struct {

	// condition
	// Required: true
	Condition *Condition `json:"condition"`

	// The EAN number associated with this product. Note: in case an ISBN is provided, the ISBN will be replaced with the actual EAN belonging to this ISBN.
	// Required: true
	Ean *string `json:"ean"`

	// fulfilment
	// Required: true
	Fulfilment *Fulfilment `json:"fulfilment"`

	// Indicates whether or not you want to put this offer for sale on the bol.com website. Defaults to false.
	OnHoldByRetailer bool `json:"onHoldByRetailer,omitempty"`

	// pricing
	// Required: true
	Pricing *Pricing `json:"pricing"`

	// A user-defined reference that helps you identify this particular offer when receiving data from us. This element can optionally be left empty and has a maximum amount of 20 characters.
	// Max Length: 20
	// Min Length: 0
	ReferenceCode *string `json:"referenceCode,omitempty"`

	// stock
	// Required: true
	Stock *StockCreate `json:"stock"`

	// In case the item is not known to bol.com you can use this field to identify this particular product. Note: in case the product is known to bol.com, the unknown product title will not be stored.
	// Max Length: 500
	// Min Length: 0
	UnknownProductTitle *string `json:"unknownProductTitle,omitempty"`
}

// Validate validates this create offer request
func (m *CreateOfferRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfilment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnknownProductTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateOfferRequest) validateCondition(formats strfmt.Registry) error {

	if err := validate.Required("condition", "body", m.Condition); err != nil {
		return err
	}

	if m.Condition != nil {
		if err := m.Condition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("condition")
			}
			return err
		}
	}

	return nil
}

func (m *CreateOfferRequest) validateEan(formats strfmt.Registry) error {

	if err := validate.Required("ean", "body", m.Ean); err != nil {
		return err
	}

	return nil
}

func (m *CreateOfferRequest) validateFulfilment(formats strfmt.Registry) error {

	if err := validate.Required("fulfilment", "body", m.Fulfilment); err != nil {
		return err
	}

	if m.Fulfilment != nil {
		if err := m.Fulfilment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fulfilment")
			}
			return err
		}
	}

	return nil
}

func (m *CreateOfferRequest) validatePricing(formats strfmt.Registry) error {

	if err := validate.Required("pricing", "body", m.Pricing); err != nil {
		return err
	}

	if m.Pricing != nil {
		if err := m.Pricing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pricing")
			}
			return err
		}
	}

	return nil
}

func (m *CreateOfferRequest) validateReferenceCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ReferenceCode) { // not required
		return nil
	}

	if err := validate.MinLength("referenceCode", "body", string(*m.ReferenceCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("referenceCode", "body", string(*m.ReferenceCode), 20); err != nil {
		return err
	}

	return nil
}

func (m *CreateOfferRequest) validateStock(formats strfmt.Registry) error {

	if err := validate.Required("stock", "body", m.Stock); err != nil {
		return err
	}

	if m.Stock != nil {
		if err := m.Stock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stock")
			}
			return err
		}
	}

	return nil
}

func (m *CreateOfferRequest) validateUnknownProductTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.UnknownProductTitle) { // not required
		return nil
	}

	if err := validate.MinLength("unknownProductTitle", "body", string(*m.UnknownProductTitle), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("unknownProductTitle", "body", string(*m.UnknownProductTitle), 500); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateOfferRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateOfferRequest) UnmarshalBinary(b []byte) error {
	var res CreateOfferRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
