// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BulkCommissionQuery bulk commission query
//
// swagger:model BulkCommissionQuery
type BulkCommissionQuery struct {

	// The condition of the offer.
	// Enum: [NEW AS_NEW GOOD REASONABLE MODERATE]
	Condition string `json:"condition,omitempty"`

	// The EAN number associated with this product.
	// Required: true
	Ean *string `json:"ean"`

	// The price of the product with a period as a decimal separator. The price should always have two decimals precision.
	// Maximum: 9999
	// Minimum: 0
	Price *float64 `json:"price,omitempty"`
}

// Validate validates this bulk commission query
func (m *BulkCommissionQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var bulkCommissionQueryTypeConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEW","AS_NEW","GOOD","REASONABLE","MODERATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bulkCommissionQueryTypeConditionPropEnum = append(bulkCommissionQueryTypeConditionPropEnum, v)
	}
}

const (

	// BulkCommissionQueryConditionNEW captures enum value "NEW"
	BulkCommissionQueryConditionNEW string = "NEW"

	// BulkCommissionQueryConditionASNEW captures enum value "AS_NEW"
	BulkCommissionQueryConditionASNEW string = "AS_NEW"

	// BulkCommissionQueryConditionGOOD captures enum value "GOOD"
	BulkCommissionQueryConditionGOOD string = "GOOD"

	// BulkCommissionQueryConditionREASONABLE captures enum value "REASONABLE"
	BulkCommissionQueryConditionREASONABLE string = "REASONABLE"

	// BulkCommissionQueryConditionMODERATE captures enum value "MODERATE"
	BulkCommissionQueryConditionMODERATE string = "MODERATE"
)

// prop value enum
func (m *BulkCommissionQuery) validateConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, bulkCommissionQueryTypeConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BulkCommissionQuery) validateCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.Condition) { // not required
		return nil
	}

	// value enum
	if err := m.validateConditionEnum("condition", "body", m.Condition); err != nil {
		return err
	}

	return nil
}

func (m *BulkCommissionQuery) validateEan(formats strfmt.Registry) error {

	if err := validate.Required("ean", "body", m.Ean); err != nil {
		return err
	}

	return nil
}

func (m *BulkCommissionQuery) validatePrice(formats strfmt.Registry) error {

	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if err := validate.Minimum("price", "body", float64(*m.Price), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("price", "body", float64(*m.Price), 9999, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkCommissionQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkCommissionQuery) UnmarshalBinary(b []byte) error {
	var res BulkCommissionQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
