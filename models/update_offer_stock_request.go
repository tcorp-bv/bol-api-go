// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateOfferStockRequest update offer stock request
//
// swagger:model UpdateOfferStockRequest
type UpdateOfferStockRequest struct {

	// The amount of stock available for the specified product present in the retailers warehouse. Note: this should not be the FBB stock! Defaults to 0.
	// Required: true
	// Maximum: 999
	// Minimum: 0
	Amount *int32 `json:"amount"`

	// Configures whether the retailer manages the stock levels or that bol.com should calculate the corrected stock based on actual open orders. In case the configuration is set to 'false', all open orders are used to calculate the corrected stock. In case the configuration is set to 'true', only orders that are placed after the last offer update are taken into account.
	// Required: true
	ManagedByRetailer *bool `json:"managedByRetailer"`
}

// Validate validates this update offer stock request
func (m *UpdateOfferStockRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagedByRetailer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateOfferStockRequest) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.MinimumInt("amount", "body", int64(*m.Amount), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("amount", "body", int64(*m.Amount), 999, false); err != nil {
		return err
	}

	return nil
}

func (m *UpdateOfferStockRequest) validateManagedByRetailer(formats strfmt.Registry) error {

	if err := validate.Required("managedByRetailer", "body", m.ManagedByRetailer); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateOfferStockRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateOfferStockRequest) UnmarshalBinary(b []byte) error {
	var res UpdateOfferStockRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
