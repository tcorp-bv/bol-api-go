// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StateTransition state transition
//
// swagger:model StateTransition
type StateTransition struct {

	// The state that was transitioned into.
	// Required: true
	// Enum: [Draft PreAnnounced ArrivedAtWH Cancelled]
	State *string `json:"state"`

	// The transition date and time in ISO 8601 format.
	// Format: date-time
	StateDate strfmt.DateTime `json:"stateDate,omitempty"`
}

// Validate validates this state transition
func (m *StateTransition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stateTransitionTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Draft","PreAnnounced","ArrivedAtWH","Cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stateTransitionTypeStatePropEnum = append(stateTransitionTypeStatePropEnum, v)
	}
}

const (

	// StateTransitionStateDraft captures enum value "Draft"
	StateTransitionStateDraft string = "Draft"

	// StateTransitionStatePreAnnounced captures enum value "PreAnnounced"
	StateTransitionStatePreAnnounced string = "PreAnnounced"

	// StateTransitionStateArrivedAtWH captures enum value "ArrivedAtWH"
	StateTransitionStateArrivedAtWH string = "ArrivedAtWH"

	// StateTransitionStateCancelled captures enum value "Cancelled"
	StateTransitionStateCancelled string = "Cancelled"
)

// prop value enum
func (m *StateTransition) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stateTransitionTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StateTransition) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *StateTransition) validateStateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("stateDate", "body", "date-time", m.StateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StateTransition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StateTransition) UnmarshalBinary(b []byte) error {
	var res StateTransition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
