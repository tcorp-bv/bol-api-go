// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderItem Order item details from an order.
//
// swagger:model OrderItem
type OrderItem struct {

	// additional services
	AdditionalServices []*AdditionalService `json:"additionalServices"`

	// Indicates whether the order was cancelled on request of the customer before the retailer has shipped it.
	CancelRequest bool `json:"cancelRequest,omitempty"`

	// The EAN number associated with this product.
	Ean string `json:"ean,omitempty"`

	// The exact delivery date at which this order must be delivered at the customer's shipping address. This field is only filled when the customer chose an exact date for delivery. This field is empty in case the latestDeliveryDate is filled.
	// Format: date
	ExactDeliveryDate strfmt.Date `json:"exactDeliveryDate,omitempty"`

	// The date this order item will automatically expire and thereby cancelling this order item from the order.
	// Format: date
	ExpiryDate strfmt.Date `json:"expiryDate,omitempty"`

	// Specifies whether this shipment has been fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB). Defaults to FBR.
	FulfilmentMethod string `json:"fulfilmentMethod,omitempty"`

	// The ultimate delivery date at which this order must be delivered at the customer's shipping address. This field is empty in case the exactDeliveryDate is filled.
	// Format: date
	LatestDeliveryDate strfmt.Date `json:"latestDeliveryDate,omitempty"`

	// Condition of the offer.
	OfferCondition string `json:"offerCondition,omitempty"`

	// Unique identifier for an offer.
	OfferID string `json:"offerId,omitempty"`

	// The total price for this order item id (item price multiplied by the quantity).
	OfferPrice float64 `json:"offerPrice,omitempty"`

	// Value provided by retailer through Offer API as ‘referenceCode’.
	OfferReference string `json:"offerReference,omitempty"`

	// The id for the order item (1 order can have multiple order items).
	OrderItemID string `json:"orderItemId,omitempty"`

	// Amount of ordered products for this order item id.
	Quantity int32 `json:"quantity,omitempty"`

	// Title of the product as shown on the webshop.
	Title string `json:"title,omitempty"`

	// Fee of the transaction.
	TransactionFee float64 `json:"transactionFee,omitempty"`
}

// Validate validates this order item
func (m *OrderItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExactDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItem) validateAdditionalServices(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalServices) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalServices); i++ {
		if swag.IsZero(m.AdditionalServices[i]) { // not required
			continue
		}

		if m.AdditionalServices[i] != nil {
			if err := m.AdditionalServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderItem) validateExactDeliveryDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExactDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("exactDeliveryDate", "body", "date", m.ExactDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) validateExpiryDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpiryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expiryDate", "body", "date", m.ExpiryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) validateLatestDeliveryDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LatestDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("latestDeliveryDate", "body", "date", m.LatestDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItem) UnmarshalBinary(b []byte) error {
	var res OrderItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
