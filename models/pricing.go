// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Pricing pricing
//
// swagger:model Pricing
type Pricing struct {

	// A set of prices (containing a quantity and selling price) that apply to this offer.
	// Required: true
	// Max Items: 4
	// Min Items: 1
	BundlePrices []*BundlePrice `json:"bundlePrices"`
}

// Validate validates this pricing
func (m *Pricing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundlePrices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pricing) validateBundlePrices(formats strfmt.Registry) error {

	if err := validate.Required("bundlePrices", "body", m.BundlePrices); err != nil {
		return err
	}

	iBundlePricesSize := int64(len(m.BundlePrices))

	if err := validate.MinItems("bundlePrices", "body", iBundlePricesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("bundlePrices", "body", iBundlePricesSize, 4); err != nil {
		return err
	}

	for i := 0; i < len(m.BundlePrices); i++ {
		if swag.IsZero(m.BundlePrices[i]) { // not required
			continue
		}

		if m.BundlePrices[i] != nil {
			if err := m.BundlePrices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bundlePrices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Pricing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Pricing) UnmarshalBinary(b []byte) error {
	var res Pricing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
