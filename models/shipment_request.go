// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShipmentRequest shipment request
//
// swagger:model ShipmentRequest
type ShipmentRequest struct {

	// Used for administration purposes.
	// Max Length: 90
	// Min Length: 0
	ShipmentReference *string `json:"shipmentReference,omitempty"`

	// Specifies shipping label to be used for this shipment. Can be retrieved through the shipping label endpoint.
	ShippingLabelCode string `json:"shippingLabelCode,omitempty"`

	// transport
	Transport *TransportInstruction `json:"transport,omitempty"`
}

// Validate validates this shipment request
func (m *ShipmentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateShipmentReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentRequest) validateShipmentReference(formats strfmt.Registry) error {

	if swag.IsZero(m.ShipmentReference) { // not required
		return nil
	}

	if err := validate.MinLength("shipmentReference", "body", string(*m.ShipmentReference), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("shipmentReference", "body", string(*m.ShipmentReference), 90); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentRequest) validateTransport(formats strfmt.Registry) error {

	if swag.IsZero(m.Transport) { // not required
		return nil
	}

	if m.Transport != nil {
		if err := m.Transport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transport")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentRequest) UnmarshalBinary(b []byte) error {
	var res ShipmentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
